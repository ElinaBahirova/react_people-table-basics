{"version":3,"sources":["App.tsx","api.ts","components/Loader/Loader.tsx","components/Loader/PersonLink.tsx","components/Loader/PersonInfo.tsx","components/Loader/PeopleTable.tsx","pages/PeoplePage.tsx","index.tsx"],"names":["Navbar","className","to","isActive","classNames","App","role","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","person","slug","sex","name","PersonInfo","isSelected","motherName","fatherName","father","mother","born","died","PeopleTable","people","selectedSlug","map","PeoplePage","useParams","useState","setPeople","isLoadingError","setIsLoadingError","isLoaded","setIsLoaded","useEffect","result","catch","finally","find","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"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","file":"static/js/main.7bf193e8.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink, Outlet } from 'react-router-dom';\n\nimport './App.scss';\n\nexport const Navbar = () => {\n  return (\n    <div className=\"navbar-brand\">\n      <NavLink\n        to=\"/\"\n        className={({ isActive }) => (\n          classNames('navbar-item', { 'has-background-grey-lighter': isActive })\n        )}\n      >\n        Home\n      </NavLink>\n\n      <NavLink\n        to=\"people\"\n        className={({ isActive }) => (\n          classNames('navbar-item', { 'has-background-grey-lighter': isActive })\n        )}\n      >\n        People\n      </NavLink>\n    </div>\n  );\n};\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <Navbar />\n      </div>\n    </nav>\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\n\nexport type Props = {\n  person: Person;\n};\n\nexport const PersonLink: FC<Props> = ({ person }) => {\n  return (\n    <Link\n      to={`/people/${person.slug}`}\n      className={person.sex === 'f' ? 'has-text-danger' : ''}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import { FC } from 'react';\nimport { Person } from '../../types';\nimport { PersonLink } from './PersonLink';\n\ninterface Props {\n  person: Person;\n  isSelected: boolean;\n}\n\nexport const PersonInfo: FC<Props> = ({ person, isSelected }) => {\n  const {\n    motherName,\n    fatherName,\n    father,\n    mother,\n    sex,\n    born,\n    died,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={isSelected ? 'has-background-warning' : ''}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      {mother && (\n        <td>\n          <PersonLink person={mother} />\n        </td>\n      )}\n\n      {(!mother && motherName) && (\n        <td>\n          {motherName}\n        </td>\n      )}\n\n      {!motherName && <td>-</td>}\n\n      {father && (\n        <td>\n          <PersonLink person={father} />\n        </td>\n      )}\n\n      {(!father && fatherName) && (\n        <td>\n          {fatherName}\n        </td>\n      )}\n\n      {!fatherName && <td>-</td>}\n    </tr>\n  );\n};\n","import { FC } from 'react';\nimport { Person } from '../../types';\nimport { PersonInfo } from './PersonInfo';\n\ninterface Props {\n  people: Person[];\n  selectedSlug: string;\n}\n\nexport const PeopleTable: FC<Props> = ({ people, selectedSlug }) => {\n  const isSelected = (person: Person) => selectedSlug === person.slug;\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PersonInfo\n            person={person}\n            key={person.slug}\n            isSelected={isSelected(person)}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPeople } from '../api';\nimport { Loader } from '../components/Loader';\nimport { PeopleTable } from '../components/Loader/PeopleTable';\nimport { Person } from '../types';\n\nexport const PeoplePage = () => {\n  const { slug = '' } = useParams();\n  const [people, setPeople] = useState<Person[] | null>(null);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const getPeopleList = () => {\n    getPeople()\n      .then((result) => setPeople(result))\n      .catch(() => setIsLoadingError(true))\n      .finally(() => setIsLoaded(true));\n  };\n\n  const getPeopleWithParents = () => {\n    if (people) {\n      setPeople(people.map((person) => {\n        return {\n          ...person,\n          mother: people.find((mother) => mother.name === person.motherName),\n          father: people.find((father) => father.name === person.fatherName),\n        };\n      }));\n    }\n  };\n\n  useEffect(() => {\n    setPeople(null);\n    getPeopleList();\n  }, []);\n\n  useEffect(() => {\n    getPeopleWithParents();\n  }, [people]);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {!people ? <Loader /> : (\n            <PeopleTable people={people} selectedSlug={slug} />\n          )}\n\n          {isLoadingError && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n\n          {(isLoaded && !people) && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport {\n  HashRouter,\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { PeoplePage } from './pages/PeoplePage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <HashRouter>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n          <Route index element={<h1 className=\"title\">Home Page</h1>} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n        </Route>\n      </Routes>\n    </HashRouter>,\n  );\n"],"sourceRoot":""}